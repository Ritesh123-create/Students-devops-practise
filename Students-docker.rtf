{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang2057{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green255\blue0;\red255\green0\blue0;\red0\green0\blue0;\red255\green255\blue0;\red0\green176\blue80;}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa160\sl259\slmult0\highlight1\b\f0\fs28\lang9 Commands for images :\par
\cf2\highlight0\b0   \par
\cf0  ->  docker pull image_name   ( docker pull ubuntu) \par
 ->  docker images  \par
       docker image ls  ( list of docker images)\par
 ->   docker rmi image_name/image_id  ( delete image from docker host)\par
 ->  docker push image_name  ( upload docker image to docker hub)\par
 ->  docker tag image_name  ( to name an image)\par
->  docker commit container_name/container_id new_image_name \par
     (build an image from customized container)\par
\cf3 ->  docker build -t new_image_name ( create an image from docker file )\par
 ->  docker search image_name ( search a docker_image)\par
 -> docker system prune -a (delete all images not attached to containers)\cf0\par
   \highlight1\b Commands for containers :\highlight0\b0\par
-> docker run image-name\par
->  docker container ls (or) docker ps( list of all running containers)\par
->  docker ps -a ( list of running and stopped containers)\par
->  docker start container_name/container_id (start a container)\par
-> docker stop container_name/container_id( stop container)\par
-> docker restart container_name/container_id( restart container)\par
-> docker restart -t 10  container_name/container_id\par
      ( restart container after 10 minutes )\par
-> docker rm container_name/container_id ( delete stopped container)\par
-> docker rm -f container_name/container_id \par
     ( delete running container, f for files)\par
-> docker stop $( docker ps -aq)\par
     ( stop all running container)\par
-> docker restart $( docker ps -aq)\par
     ( restart all running container)\par
->  docker rm -f $(docker ps -aq)\par
     ( remove all running and stopped container)\par
->  docker logs container_name/container_id \par
     ( see logs generated by container)\par
->  docker port container_name/container_id \par
     ( see port\tab  generated by container)\par
->  docker inspect container_name/container_id \par
     ( to see detailed info container)\par
->  docker attach container_name/container_id \par
     ( get into shell of running container and check )\par
->  docker exec -it container_name/container_id \par
     ( to execute any command in container)\par
->  docker exec -it container_name/container_id bash\par
     ( launch bash shell in container)\par
->  docker run image_name\par
    (create a container from docker image)\par
-> To start a container after exiting from it\par
       docker exec -it containername/containerid bash\par
\highlight1\b\par
Flags :\highlight0\b0\par
    \par
 --name (used for giving name to container)\par
   -it  (for opening an interactive terminal in container)\par
   -d  (running container in detached mode)\par
   -env or -e  (passing environment variables to container)\par
  -p  (port mapping )\par
  -P  (automatic port mapping)\par
  -v  (attaching volume to container)\par

\pard\sa200\sl276\slmult1\fs22\par
\highlight4\fs36 Docker file :\highlight0\fs22\par
\par

\pard\sa160\sl259\slmult0\cf5\b\fs28 Keywords used in docker file ( case sensitive)\cf0\b0\par
1. FROM                     -   Used to specify the base image from which the \par
                                     docker file has to be created .\par
2. MAINTAINER        -  This name represents of the organization or the \par
                                     author who created this docker file.\par
3. CMD                       -  This is used to specify the initial command that \par
                                     should be executed when the container starts.\par
4. ENTRYPOINT        - Used to specify the default process that should be       \par
                                     exec. when container starts. \par
5. RUN                       - Used for running linux commands within the \par
                                    container . It is generally helpful for installing \par
                                    software in the container.\par
6. USER                    - Used to specify the default user who should login to \par
                                     the container\par
7. WORKDIR           - Used to specify the default working  directory in the\par
                                    container\par
8. COPY                   - Copy files from host  machine to container.\par
9. ADD                    - Copy files from host  machine to container it can also \par
                                    be used for downloading files from remote servers , \par
\tab\tab\tab   extracting zip files\par
10.  ENV                 -   Used for specifying the environment variable that \par
                                   should be passed to the container.\par
11. EXPOSE           - Specify internal port of container\par
12. VOLUME        - Specify default volume that should be attched to\par
                                  the container\par
13. LABEL             - Used for giving label to container\par
\par
---> docker commit <container_id> <new_image_name>:<tag>\par
---> \fs32 docker build -t image-name .\par
\par

\pard\sa200\sl276\slmult1\cf2\b Push to Dockerhub :\cf0\par
\tab\b0 ---> sign in to dockerhub and create a repository from \tab repositories section\par
\tab\tab eg . repository name is  = myrepository\par
\tab ---> come to aws terminal \par
\tab ---> docker login\par
\tab ---> enter username (username of dockerhub)\par
\tab ---> enter password (passwd of dockerhub)\par
\tab ---> docker tag imagename username/repositoryname:tag\par
\tab ---> docker images\par
\tab ---> docker push username/repositoryname:tag\par
\highlight4\b Volumes:\highlight0\b0\par
\tab ---> docker volume create vol-name   \par
\tab\tab [ to create manually]\par
\tab\fs28 ---> docker run -it --name demo -v vol-name:/mylogs img-name\par
\fs22\tab\fs32\tab [create volume and attach to container directly]\par
\highlight4\b docker-compose:\highlight0\b0\par
\tab ---> apt update\par
\tab ---> apt install docker-compose -y\par
\tab ---> create a yaml file where we define our container\par
\tab ---> docker-compose -f compose.yml config\par
\tab ---> docker-compose up -d\par
\tab ---> docker inspect container-id/name\par
\tab ---> docker-compose down\par
\highlight4\b Docker-swarm:\highlight0\b0\par
\tab ---> sudo hostname new-name\par
\tab ---> docker swarm init\par
\tab ---> docker swarm join-token manager\par
\tab ---> docker swarm join-token worker\par
\tab ---> docker info | grep -i swarm\par
\tab ---> docker node ls\par
\tab ---> docker network ls\par
\highlight4\b High Availability and Fault tolerance:\highlight0\b0\par
\tab\fs28 ---> docker service create --name <service_name> <image_name>\fs32\tab ---> \fs28 docker service create --name first --replicas=3 -p 31000:80 nginx\par
\tab ---> \fs32 docker service ls\par
\tab ---> docker service ps first\par
\tab ---> docker ps -a\par
\tab ---> docker node ls\par
\tab ---> watch docker node ls\par
\highlight4\b Scale up:\highlight0\b0\par
\tab docker service scale first=5\par
\highlight4\b Scale down:\highlight0\b0\par
\tab docker service scale first=2\par
\highlight4\b Perform rolling updates: \par
\highlight0\tab ---> \b0 docker service create --name myweb -p 32000:80 nginx:1.17\par
\tab ---> docker service update myweb --image nginx:1.18\par
\tab --->docker service ps myweb\par
\highlight4\b Perform rollbacks: \par
\highlight0\tab ---> \b0 docker service rollback myweb\par
\tab ---> docker service ls\par
\highlight4\b Remove Service:\highlight0\b0\par
\tab ---> docker service rm myweb\par
\tab ---> docker service ls\par
Drain the manager:\par
\tab ---> docker node ls\par
\tab ---> \fs28 docker node update --availability=Drain docker-manager-1\fs32\par
\tab ---> \fs28 docker node update --availability=Drain docker-manager-2\par
\tab ---> docker node ls\par
\highlight4\b Remove node from cluster:\par
\highlight0\tab ---> \b0 docker node ls\par
  Switch to node which u want to leave \par
\tab ---> docker info | grep swarm \par
\tab ---> \fs32 docker swarm leave\par
\tab ---> docker info | grep swarm\par
 Switch to manager:\par
\tab ---> docker node ls\par
\tab ---> docker node rm hostname/id\par
\tab ---> docker node ls\tab\par
\highlight4 Promoting worker to manager :\par
\highlight0   Switch to manager:\par
\tab ---> docker node promote worker1\par
\tab ---> docker node ls \par
 Switch to worker1:\par
\fs28\tab ---> docker node ls\par
\highlight4\fs32 Demote manager to worker :\par
\highlight0\fs28  Switch to manager1:\par
\tab ---> \fs32 docker node demote manager2\par
\tab ---> docker node ls\par
Switch to manager2:\par
\tab docker node ls\par
\fs28\par
\tab\par
\fs32\par
\par

\pard\sa160\sl259\slmult0\tab\tab\tab\par
\fs28\par

\pard\sa200\sl276\slmult1\fs22\par
\par
}
